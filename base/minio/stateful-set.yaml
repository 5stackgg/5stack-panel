apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  labels:
    app: minio
  namespace: 5stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: 5stack-minio
                operator: In
                values:
                  - "true"
      containers:
        - name: minio
          image: quay.io/minio/minio:latest
          ports:
            - containerPort: 9000
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            periodSeconds: 5
            failureThreshold: 60
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 3
          envFrom:
            - configMapRef:
                name: s3-config
            - secretRef:
                name: minio-secrets
            - secretRef:
                name: s3-secrets
          command:
            - /bin/bash
            - -c
          args:
            - |
              mkdir -p /data/5stack &&
              minio server /data --console-address :9090 &
              sleep 10 &&
              mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
              mc mb myminio/5stack || true
              mc admin user add myminio ${S3_ACCESS_KEY} ${S3_SECRET} &&
              mc admin policy attach myminio readwrite --user=${S3_ACCESS_KEY}
              wait
          volumeMounts:
            - name: minio-data
              mountPath: /data
      volumes:
        - name: minio-data
          persistentVolumeClaim:
            claimName: minio-pvc